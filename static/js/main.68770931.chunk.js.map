{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","url","name","email","className","src","alt","CardList","robots","map","user","i","key","id","Scroll","props","style","overflowY","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4NAceA,EAZF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACvB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAyCG,UAAU,wBAAwBE,IAAG,UAAKJ,EAAL,YACtF,6BACI,4BAAKA,GACL,2BAAIC,MCcLI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,kBAAC,WAAD,KAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLE,GAAIH,EAAKG,GACTZ,IAAKS,EAAKR,KACVA,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCJjBW,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UAC9DJ,EAAMK,WCaJC,EAhBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,kBAAC,WAAD,KACI,yBAAKlB,UAAU,OACX,2BACIA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCYfI,E,kDAnBX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,mEAEJG,KAAKhB,MAAMK,a,GAhBEa,aCiDbC,G,wDA3CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACTnB,OAAQ,GACR6B,YAAY,IAJN,E,gEAQO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAExB,OAAQoC,S,+BAOjC,IAAD,EAC2Bb,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAiBrC,EAAOsC,QAAQ,SAAAC,GAClC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAKxC,EAAO0C,OAIJ,kBAAC,WAAD,KACI,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQqC,QAT/B,wBAAIzC,UAAU,UAAd,kB,GAzBD6B,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.68770931.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ url, name, email }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${url}?200x200`} className='br-100 ba b--black-10' alt={`${name} robot`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React, { Fragment } from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <Fragment>\n            {\n                robots.map((user, i) => {\n                    return (\n                    <Card \n                    key={i} \n                    id={user.id} \n                    url={user.name}\n                    name={user.name} \n                    email={user.email}\n                    />);\n                })\n            }\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <Fragment>\n            <div className='pa2'>\n                <input\n                    className='pa3 ba b--green bg-lightest-blue' \n                    type=\"search\" \n                    placeholder=\"search robots\"\n                    onChange={searchChange} \n                />\n            </div>\n        </Fragment>\n\n    );\n}\n\nexport default SearchBox;","import React, { Component }from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops, something wrong is not right.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Fragment, Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox'\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield:''\n        }\n    }\n    \n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots: users }));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n        const filteredRobots = robots.filter( robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n        if (!robots.length) {\n            return <h1 className='tc pv7'>Loading...</h1>\n        } else {\n            return (\n                <Fragment>\n                    <div className='tc'>\n                        <h1 className='f1'>RoboDex</h1>\n                        <SearchBox searchChange={this.onSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundary>\n                                <CardList robots={filteredRobots}/>\n                            </ErrorBoundary>\n                        </Scroll>\n                    </div>\n                </Fragment>\n            );\n        }\n    } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}